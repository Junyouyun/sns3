// e-ssa一种在卫星通信中应用的增强型卫星支持接入的场景，
// 主要用于改进卫星网络的接入效率和系统性能。
// E-SSA的核心目标是通过优化地面用户和卫星之间的通信链路，提高信号质量和带宽利用率，并且解决传统卫星通信系统中可能存在的一些问题，如延迟和带宽限制等。

#include "ns3/applications-module.h"
#include "ns3/config-store-module.h"
#include "ns3/core-module.h"
#include "ns3/internet-module.h"
#include "ns3/network-module.h"
#include "ns3/satellite-module.h"
#include "ns3/traffic-module.h"

using namespace ns3;
NS_LOG_COMPONENT_DEFINE("sat-essa-test");

int main(int argc,char *argv[]){

     std::string beams = "8";
    uint32_t nbGw = 1;
    uint32_t nbUtsPerBeam = 100;
    uint32_t nbEndUsersPerUt = 1;

    Time appStartTime = Seconds(0.001);
    Time simLength = Seconds(60.0);

    uint32_t packetSize = 64;
    std::string dataRate = "5kbps";
    std::string onTime = "0.2";
    std::string offTime = "0.8";

    double frameAllocatedBandwidthHz = 15000;
    double frameCarrierAllocatedBandwidthHz = 15000;
    double frameCarrierRollOff = 0.22;
    double frameCarrierSpacing = 0;
    uint32_t frameSpreadingFactor = 256;

    bool interferenceModePerPacket = true;
    bool displayTraces = true;

    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>("example-essa");

    CommandLine cmd;
     cmd.AddValue("modelPP", "interferenceModePerPacket", interferenceModePerPacket);
    cmd.AddValue("traces", "displayTraces", displayTraces);
    cmd.AddValue("utsPerBeam", "Number of UTs per spot-beam", nbUtsPerBeam);
    cmd.AddValue("simLength", "Simulation duration in seconds", simLength);
    cmd.AddValue("packetSize", "Constant packet size in bytes", packetSize);
    cmd.AddValue("dataRate", "Data rate (e.g. 500kb/s)", dataRate);
    cmd.AddValue("onTime", "Time for packet sending is on in seconds", onTime);
    cmd.AddValue("offTime", "Time for packet sending is off in seconds", offTime);
    cmd.AddValue("frameAllocatedBandwidthHz",
                 "Allocated bandwidth in Hz",
                 frameAllocatedBandwidthHz);
    cmd.AddValue("frameCarrierAllocatedBandwidthHz",
                 "Allocated carrier bandwidth in Hz",
                 frameCarrierAllocatedBandwidthHz);
    cmd.AddValue("frameCarrierRollOff", "Roll-off factor", frameCarrierRollOff);
    cmd.AddValue("frameCarrierSpacing", "Carrier spacing factor", frameCarrierSpacing);
    cmd.AddValue("frameSpreadingFactor", "Carrier spreading factor", frameSpreadingFactor);
    simulationHelper->AddDefaultUiArguments(cmd);
    cmd.Parse(argc, argv);

    Config::SetDefault("ns3::SatEnvVariables::EnableOutputOverwrite",BooleanValue(true));
    Config::SetDefault("ns3::SatHelper::PacketTraceEnabled",BooleanValue(true));

    // 超帧设置 超帧类型/帧/第0帧分配的带宽/在波带宽/滚将因子/载波间距/扩频因子
    Config::SetDefault("ns3::SatConf::SuperFrameConfForSeq0",EnumValue(SatSuperframeConf::SUPER_FRAME_CONFIG_4));
    Config::SetDefault("ns3::SatSuperframeConf4::FrameConfigType",EnumValue(SatSuperframeConf::CONFIG_TYPE_4));
    Config::SetDefault("ns3::SatSuperframeConf4::Frame0AllocatedBandwidthHz",DoubleValue(frameAllocatedBandwidthHz));
    Config::SetDefault("ns3::SatSuperframeConf4::Frame0CarrierAllocatedBandwidthHz",DoubleValue(frameCarrierAllocatedBandwidthHz));
    Config::SetDefault("ns3::SatSuperframeConf4::Frame0CarrierRollOff",DoubleValue(frameCarrierRollOff));
    Config::SetDefault("ns3::SatSuperframeConf4::Frame0CarrierSpacing",DoubleValue(frameCarrierSpacing));
    Config::SetDefault("ns3::SatSuperframeConf4::Frame0SpreadingFactor",DoubleValue(frameSpreadingFactor));

    // CRDSA设置(载波资源划分多址)
    Config::SetDefault("ns3::SatLowerLayerServiceConf::DaServiceCount",UintegerValue(4));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided",BooleanValue(false));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed",BooleanValue(false));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed",BooleanValue(false));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided",BooleanValue(false));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided",BooleanValue(false));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided",BooleanValue(false));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed",BooleanValue(false));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed",BooleanValue(false));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed",BooleanValue(false));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed",BooleanValue(false));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed",BooleanValue(false));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed",BooleanValue(false));

    // 配置RA
    Config::SetDefault("ns3::SatBeamHelper::RandomAccessModel",EnumValue(SatEnums::RA_MODEL_ESSA));
    // 接受干扰模型
    if(interferenceModePerPacket){
            Config::SetDefault("ns3::SatBeamHelper::RaInterferenceModel",EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));
    }else{
            Config::SetDefault("ns3::SatBeamHelper::RaInterferenceModel",EnumValue(SatPhyRxCarrierConf::IF_PER_FRAGMENT));
    }
    // 干扰消除模型
    Config::SetDefault("ns3::SatBeamHelper::RaInterferenceEliminationModel",EnumValue(SatPhyRxCarrierConf::SIC_RESIDUAL));
    // 碰撞检测模型
    Config::SetDefault("ns3::SatBeamHelper::RaCollisionModel",EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));
    // 返回链路
    Config::SetDefault("ns3::SatBeamHelper::ReturnLinkLinkResults",EnumValue(SatEnums::LR_FSIM));
    // 波形配置
    Config::SetDefault("ns3::SatWaveformConf::DefaultWaveformId",UintegerValue(2));
    Config::SetDefault("ns3::SatHelper::WaveformConfFileName",StringValue("fSimWaveforms.txt"));

    // SIC配置
    Config::SetDefault("ns3::SatPhyRxCarrierPerWindow::WindowDuration", StringValue("600ms"));
    Config::SetDefault("ns3::SatPhyRxCarrierPerWindow::WindowStep", StringValue("200ms"));
    Config::SetDefault("ns3::SatPhyRxCarrierPerWindow::WindowDelay", StringValue("0s"));
    Config::SetDefault("ns3::SatPhyRxCarrierPerWindow::FirstWindow", StringValue("0s"));
    Config::SetDefault("ns3::SatPhyRxCarrierPerWindow::WindowSICIterations", UintegerValue(5));
    Config::SetDefault("ns3::SatPhyRxCarrierPerWindow::SpreadingFactor", UintegerValue(1));
    Config::SetDefault("ns3::SatPhyRxCarrierPerWindow::DetectionThreshold", DoubleValue(0));
    Config::SetDefault("ns3::SatPhyRxCarrierPerWindow::EnableSIC", BooleanValue(false));

     // 随即接入参数配置
    Config::SetDefault("ns3::SatLowerLayerServiceConf::RaService0_MaximumUniquePayloadPerBlock",
                       UintegerValue(3));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::RaService0_MaximumConsecutiveBlockAccessed",
                       UintegerValue(6));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::RaService0_MinimumIdleBlock",
                       UintegerValue(2));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::RaService0_BackOffTimeInMilliSeconds",
                       UintegerValue(50));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::RaService0_BackOffProbability",
                       UintegerValue(1));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::RaService0_HighLoadBackOffProbability",
                       UintegerValue(1));
    Config::SetDefault(
        "ns3::SatLowerLayerServiceConf::RaService0_AverageNormalizedOfferedLoadThreshold",
        DoubleValue(0.99));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::RaService0_NumberOfInstances",
                       UintegerValue(3));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::RaService0_SlottedAlohaAllowed",
                       BooleanValue(false));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::RaService0_CrdsaAllowed",
                       BooleanValue(false));
    Config::SetDefault("ns3::SatLowerLayerServiceConf::RaService0_EssaAllowed", BooleanValue(true));

    simulationHelper->SetSimulationTime(simLength);

    simulationHelper->SetGwUserCount(nbGw);
    simulationHelper->SetUtCountPerBeam(nbUtsPerBeam);
    simulationHelper->SetUserCountPerUt(nbEndUsersPerUt);
    simulationHelper->SetBeams(beams);

    simulationHelper->CreateSatScenario();

    Config::SetDefault("ns3::OnOffApplication::PacketSize", UintegerValue(packetSize));
    Config::SetDefault("ns3::OnOffApplication::DataRate", StringValue(dataRate));
    Config::SetDefault("ns3::OnOffApplication::OnTime",
                       StringValue("ns3::ConstantRandomVariable[Constant=" + onTime + "]"));
    Config::SetDefault("ns3::OnOffApplication::OffTime",
                       StringValue("ns3::ConstantRandomVariable[Constant=" + offTime + "]"));

    simulationHelper->InstallTrafficModel(SimulationHelper::ONOFF,
                                          SimulationHelper::UDP,
                                          SimulationHelper::RTN_LINK,
                                          appStartTime,
                                          simLength);

    simulationHelper->EnableProgressLogs();

    std::string outputPath = Singleton<SatEnvVariables>::Get()->LocateDirectory(
        "contrib/satellite/data/sims/example-essa");
    Config::SetDefault("ns3::ConfigStore::Filename",
                       StringValue(outputPath + "/output-attributes.xml"));
    Config::SetDefault("ns3::ConfigStore::FileFormat", StringValue("Xml"));
    Config::SetDefault("ns3::ConfigStore::Mode", StringValue("Save"));
    ConfigStore outputConfig;
    outputConfig.ConfigureDefaults();

     if (displayTraces)
    {
        Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();

        s->AddGlobalFeederEssaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);
        s->AddGlobalFeederEssaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);
        s->AddPerUtFeederEssaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);
        s->AddPerUtFeederEssaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);

        s->AddGlobalFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);
        s->AddGlobalFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);
        s->AddPerUtFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);
        s->AddPerUtFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);

        s->AddGlobalRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);
        s->AddGlobalRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCATTER_FILE);
        s->AddPerBeamRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);
        s->AddPerBeamRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCATTER_FILE);

        s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);
        s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);
        s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
        s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);

        s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);
        s->AddPerUtRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);
        s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
        s->AddPerUtRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);

        s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);
        s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);
        s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);
        s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);

        s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);
        s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);
        s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);
        s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);

        s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);
        s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);
        s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);
        s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);
    }

    simulationHelper->RunSimulation();

    return 0;
}
