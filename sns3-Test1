// 设置转发模式
// 设置队列大小
// 启用卫星星座功能
// 星座配置文件路径
// 设置星间传输速率
// 卫星起始时间与更新频率
// 设置用户数量及波束配置等
// 流量模型配置
// 统计与日志
// 仿真




#include "ns3/applications-module.h"
#include "ns3/config-store-module.h"
#include "ns3/core-module.h"
#include "ns3/internet-module.h"
#include "ns3/network-module.h"
#include "ns3/satellite-module.h"
#include "ns3/traffic-module.h"

using namespace ns3;

NS_LOG_COMPONENT_DEFINE("sat-constellation-test");

// 模拟两个卫星在对地精致轨道上的通信
void mainGeoTwoSat(uint32_t packetSize,
                    std::string interval,
                    std::string configurationFolder,
                    std::string startDate,
                    Ptr<SimulationHelper> simulationHelper){
// 配置再生模式 再生模式（Regeneration Mode）在卫星通信中指的是信号的处理和转发方式，通常是指在信号经过卫星或网络中间节点时，是否对信号进行重新生成或修复。
// 转发再生模式（Regeneration Forwarding）：在这种模式下，卫星或中继节点不进行信号的重新生成，而是直接将接收到的信号进行转发。适用于信号质量较好或者对延迟要求较高的情况。
    Config::SetDefault("ns3::SatConf::ForwardLinkRegenerationMode",EnumValue(SatEnums::REGENERATION_NETWORK));
    Config::SetDefault("ns3::SatConf::ReturnLinkRegenerationMode",EnumValue(SatEnums::REGENERATION_NETWORK));

    Config::SetDefault("ns3::SatGeoFeederPhy::QueueSize",UintegerValue(100000));
    Config::SetDefault("ns3::SatGeoUserPhy::QueueSize",UintegerValue(100000));

    // 启用卫星星座的功能
    Config::SetDefault("ns3::SatHelper::SatConstellationEnabled",BooleanValue(true));

    Config::SetDefault("ns3::SatHelper::SatConstellationFolder",StringValue(configurationFolder));
    // 设置卫星之间的链路数据传输速率
    Config::SetDefault("ns3::PointToPointIslHelper::IslDataRate",DataRateValue(DataRate("100Mb/s")));
    // 设置卫星起始日期
    Config::SetDefault("ns3::SatSGP4MobilityModel::StartDateStr",StringValue(startDate));
    // 指定是否在每次请求时更新卫星的位置
    Config::SetDefault("ns3::SatSGP4MobilityModel::UpdatePositionEachRequest",BooleanValue(true));
    // 设置卫星位置更新的时间周期
    Config::SetDefault("ns3::SatSGP4MobilityModel::UpdatePositionPeriod",TimeValue(Seconds(1)));
    // 设置每个卫星网关（Ground Station, GW）上连接的用户数量。
    Config::SetDefault("ns3::SatHelper::GwUsers", UintegerValue(3));

    // 启用 自适应编码与调制（ACM）。
    Config::SetDefault("ns3::SatBbFrameConf::AcmEnabled",BooleanValue(true));
    // 允许覆盖仿真输出
    Config::SetDefault("ns3::SatEnvVariables::EnableSimulationOutputOverwrite", BooleanValue(true));
    // 启用 数据包追踪
    Config::SetDefault("ns3::SatHelper::PacketTraceEnabled", BooleanValue(true));
    // 设置仿真运行的时间为 30秒
    simulationHelper->SetSimulationTime(Seconds(30));
    simulationHelper->SetOutputTag("geo");

    std::set<uint32_t> beamSetAll = {1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15,
                                     16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                                     31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
                                     46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
                                     61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72};

    std::set<uint32_t> beamSet = {43, 30};
    simulationHelper->SetBeamSet(beamSet);
    simulationHelper->SetUserCountPerUt(5);

    LogComponentEnable("sat-constellation-test", LOG_LEVEL_INFO);

    Ptr<SatHelper> helper = simulationHelper->CreateSatScenario();

    // 打印卫星通信系统的拓扑结构。
    helper->PrintTopology(std::cout);
    // 输出卫星之间的 ISL（Inter-Satellite Link）链路映射
    Singleton<SatIdMapper>::Get()->ShowIslMap();

    Config::SetDefault("ns3::CbrApplication::Interval", StringValue(interval));
    Config::SetDefault("ns3::CbrApplication::PacketSize", UintegerValue(packetSize));

    Time startTime = Seconds(1.0);
    Time stopTime = Seconds(29.0);
    Time startDelay = Seconds(0.0);
    // 安装流量模型
    simulationHelper->InstallTrafficModel(SimulationHelper::CBR,
                                          SimulationHelper::UDP,
                                          SimulationHelper::FWD_LINK,
                                          startTime,
                                          stopTime);
    simulationHelper->InstallTrafficModel(SimulationHelper::CBR,
                                          SimulationHelper::UDP,
                                          SimulationHelper::RTN_LINK,
                                          startTime,
                                          stopTime);

    NS_LOG_INFO("--- sat-constellation-example ---");
    NS_LOG_INFO("  PacketSize: " << packetSize);
    NS_LOG_INFO("  Interval: " << interval);
    NS_LOG_INFO("  ");

    // To store attributes to file
    Config::SetDefault("ns3::ConfigStore::Filename", StringValue("output-attributes.xml"));
    Config::SetDefault("ns3::ConfigStore::FileFormat", StringValue("Xml"));
    Config::SetDefault("ns3::ConfigStore::Mode", StringValue("Save"));
    ConfigStore outputConfig;
    outputConfig.ConfigureDefaults();

    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();

    // 吞吐量统计
    s->AddPerUtFwdFeederPhyThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtFwdUserPhyThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnFeederPhyThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnUserPhyThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);

    s->AddPerUtFwdFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);

    s->AddPerUtFwdFeederDevThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtFwdUserDevThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnFeederDevThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnUserDevThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);

    s->AddGlobalFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerGwFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerGwRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerSatFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerSatRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerBeamFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerBeamRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);

    // 时延
    s->AddPerUtFwdPhyDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtFwdMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtFwdDevDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnPhyDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnDevDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);

    // 链路时延
    s->AddPerUtFwdFeederPhyLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtFwdUserPhyLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnFeederPhyLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnUserPhyLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);

    s->AddPerUtFwdFeederMacLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtFwdUserMacLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnFeederMacLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnUserMacLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);

    s->AddPerUtFwdFeederDevLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtFwdUserDevLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnFeederDevLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnUserDevLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);

    // 抖动
    s->AddPerUtFwdPhyJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtFwdMacJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtFwdDevJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnPhyJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnMacJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnDevJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);

    // 链路抖动
    s->AddPerUtFwdFeederPhyLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtFwdUserPhyLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnFeederPhyLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnUserPhyLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);

    s->AddPerUtFwdFeederMacLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtFwdUserMacLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnFeederMacLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnUserMacLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);

    s->AddPerUtFwdFeederDevLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtFwdUserDevLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnFeederDevLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnUserDevLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);

    // 信噪比，接收功率
    s->AddPerUtFwdFeederLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtFwdUserLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);

    s->AddPerUtFwdFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtFwdUserLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);

    // Other statistics
    s->AddPerUtFwdFeederLinkModcod(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtFwdUserLinkModcod(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnFeederLinkModcod(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerUtRtnUserLinkModcod(SatStatsHelper::OUTPUT_SCATTER_FILE);

    s->AddPerGwRtnFeederQueueBytes(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerSatRtnFeederQueueBytes(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerSatRtnFeederQueuePackets(SatStatsHelper::OUTPUT_SCATTER_FILE);

    s->AddPerGwFwdUserQueueBytes(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerSatFwdUserQueueBytes(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerSatFwdUserQueuePackets(SatStatsHelper::OUTPUT_SCATTER_FILE);

    // 丢包率
    s->AddGlobalPacketDropRate(SatStatsHelper::OUTPUT_SCATTER_FILE);
    s->AddPerIslPacketDropRate(SatStatsHelper::OUTPUT_SCATTER_FILE);

    simulationHelper->EnableProgressLogs();
    simulationHelper->RunSimulation();


};

void mainLeo(){};

int main(int argc,char *argv[]){
    // 定义属性
    uint32_t packetSize = 128;
    std::string interval = "20ms";
    std::string configurationFolder = "eutelsat-geo-2-sats-isls";
    std::string startDate = "2022-11-13 12:00:00";
    

    Ptr<SimulationHelper> simulationhelper = CreateObject<SimulationHelper>("example-constellation");
    
    CommandLine cmd;
    cmd.AddValue("packetSize","the size of packet",packetSize);
    cmd.AddValue("interval","Interval to sent packets in seconds (e.g. (1s))",interval);
    cmd.AddValue("configurationFolder","Satellite constellation configuration folder (e.g. eutelsat-geo-2-sats-isls",configurationFolder);
    cmd.AddValue("startDate","Simulation start date (e.g. 2022-11-13 12:00:00)",startDate);
    simulationhelper->AddDefaultUiArguments(cmd);
    cmd.Parse(argc,argv);

    // 根据相应的星座类型执行操作
    std::replace(startDate.begin(),startDate.end(),',',' ');

    if(configurationFolder == "eutelsat-geo-2-sats-isls" || configurationFolder =="eutelsat-geo-2-sats-no-isls"){
        mainGeoTwoSat(packetSize,interval,configurationFolder,startDate,simulationhelper);
    }else if(configurationFolder == "starlink-1584-sats" ||
             configurationFolder == "kuiper-1156-sats" ||
             configurationFolder == "telesat-351-sats" ||
             configurationFolder == "iridium-next-66-sats"){
                mainLeo();
             }else{
                NS_FATAL_ERROR("Unknown constellation: " << configurationFolder);
             }
    

}
